plugins {
	id("net.twisterrob.ghlint.cli")
}

dependencies {
	implementation(projects.ghlintRules)
	implementation(projects.ghlintSnakeyaml)
	implementation(projects.ghlintCli)
}

application {
	mainClass = "net.twisterrob.ghlint.docs.issues.MainKt"
}

tasks.named("run", JavaExec.class) {
	def output = rootProject.layout.projectDirectory.dir("website/docs/issues")
	outputs.dir(output)
	args(output)
}

tasks.named("build") {
	dependsOn("run")
}

tasks.register("generateCliHelp", JavaExec.class) {
	group = "documentation"
	description = "Generates the CLI help for the website"
	mainClass = "net.twisterrob.ghlint.docs.cli.MainKt"
	classpath(sourceSets.main.runtimeClasspath)
	def output = layout.buildDirectory.dir("generated/cli-help")
	outputs.dir(output).withPropertyName("generatedFiles")
	argumentProviders.add(new LazyArgumentProvider(output))
}

class LazyArgumentProvider implements CommandLineArgumentProvider {

	@OutputDirectory
	Provider<Directory> outputDir

	LazyArgumentProvider(Provider<Directory> output) {
		outputDir = output
	}

	@Override
	Iterable<String> asArguments() {
		[ getOutputDir().get().asFile.absolutePath ]
	}
}
