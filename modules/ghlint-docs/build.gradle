import net.twisterrob.ghlint.build.dsl.LazyArgumentProvider

plugins {
	id("net.twisterrob.ghlint.library")
}

dependencies {
	implementation(projects.ghlintRules)
	implementation(projects.ghlintSnakeyaml)
	implementation(projects.ghlintCli)
}

tasks.named("build") {
	dependsOn("generateDocs")
}

tasks.register("generateDocs") {
	group = "documentation"
	description = "Generates the documentation files for the website"
	dependsOn("generateIssues")
	dependsOn("generateCliHelp")
}

configurations {
	consumable("generatedIssues")
	consumable("generatedCliHelp")
}

def generateIssues = tasks.register("generateIssues", JavaExec.class) {
	group = "documentation"
	description = "Generates the CLI help for the website"
	mainClass = "net.twisterrob.ghlint.docs.issues.MainKt"
	def generatedIssues = layout.buildDirectory.dir("generated/issues")
	classpath(sourceSets.main.runtimeClasspath)
	outputs.dir(generatedIssues).withPropertyName("generatedFiles")
	argumentProviders.add(new LazyArgumentProvider(generatedIssues))
}

def generateCliHelp = tasks.register("generateCliHelp", JavaExec.class) {
	group = "documentation"
	description = "Generates the CLI help for the website"
	mainClass = "net.twisterrob.ghlint.docs.cli.MainKt"
	def generatedCliHelp = layout.buildDirectory.dir("generated/cli-help")
	classpath(sourceSets.main.runtimeClasspath)
	outputs.dir(generatedCliHelp).withPropertyName("generatedFiles")
	argumentProviders.add(new LazyArgumentProvider(generatedCliHelp))
}

artifacts {
	add("generatedIssues", generateIssues)
	add("generatedCliHelp", generateCliHelp)
}
